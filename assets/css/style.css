* {
    margin: 0;
}

/* Duas formas de fazer, de acordo com a herança ou selecionando a tag - mas tem que observar como esta estruturado o HTML*/
p {
    /* color: darkblue; */
}

body div section p {
    /* toda section que esta dentro da div que esta dentro do body (esta selecionando somente a section) - so é selecionado o ultimo elemento */
    /* para selecionar mais de um elemento tem que usar a virgula ex: body, div, section, p */
    /* color: darkblue; */
}




/* EXE2 */
.heading {
    /* color: blueviolet; */
}

/* div.main-content h2.heading  a main content que tem um descendente que é o h2 com a classe heading */
.main-content h2,
h3,
h4 {
    /* ou .main-content .heading */
    /* font-style: italic; */
}

.pai {
    /* background-color: aqua; */
}

/* div {
    color: inherit;
}  faz com que seja herdado as propriedades 
   div {
    color: initial para tirar essa configuração herdar 
*/

/* child selector - seletor de descendentes*/
/* .pai > .filha a classe pai esta diretamente ligada a classe filha - ou seja a classe filha esta dentro da classe pai */

/* EXE3 */
.pai h1+p {
    /* selector de irmãos - seleciona todo elemento que tiver depois diretamente do elemento pai */
    /* color: brown; */
}

.pai p+h1 {
    /* color: yellow; */
}

/* EXE4 */
.pai h1~p {
    /*  seleciona todos depois da tag escolhida */
    /* color: aqua; */
}

.pai .um~.dois {
    /*  seleciona todos depois da tag escolhida */
    /* color: aqua; */
}


/* selecionar atributos */
[meu-atributo=valor] {
    /* ou selecionar apenas o nome do atributo */
    /* color: red; */
}

/* [checked] {
    width: 50px;
    height: 50px;
} */

/* para selecionar o quecomeça é com ^ e para selecionar com o que termina é com $*, pois um atributo pode ter varios valores */


/* EXE 5 */
/* para fazer alguma transição */
/* .heading {
    transition: all 300ms ease-in-out; */
/* all para selecionar todos - depois vc digita quanto tempo deseja - e por ultimo como quer que a transição ocorra */
/* }

.heading:hover {
    background-color: rgb(13, 146, 102);
} */

/* pseudo classes de links */

/* a:link {
    color: aquamarine;
}

a:hover {
    color: yellowgreen;
}

a:visited {
    color: blueviolet;
}

a:active {
    background-color: blue;
} */

/* input:focus {
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    outline: none;
    border: 1px solid black;
}

input:disabled {
    background-color: red;
} */

/* input:checked { */
/* mudar o estado do ckeckbox quando ele estiver selecionado */
/* width: 50px;
   height: 50px;
}

input:checked+p {
    /* muda a cor do p quando o input estiver marcado estiver marcado 
    color: aqua;
}

input:not(:checked) + p { Quando o checkbox não estiver selecionado ele ficará vermelho 
color: red;
}

/* child */
/* firts child - o primeiro filho 
last child - o ultimo filho */

/* .pai .lista li:last-child {
    background-color: aqua;
} */
/* 
Se eu quiser uma configuração especifica em um input do tipo required (ou outro), posso fazer da seguinte forma 
input:required {
 e colocar a consfiguração desejada 
}
*/

p:not(.meio) {
    /* exclui a classe selecionada */
    /* color: aqua; */
}


ul li:nth-child(even) {
    /* even para selecionar todos os pares - odd para selecionar os impares*/
    /* background-color: aqua; */
}

ul li:nth-child(odd) {
    /* even para selecionar todos os pares - odd para selecionar os impares*/
    /* background-color: rgb(104, 128, 128); */
}

ul li:nth-child(3n) {
    /* de 3 em 3 muda para outra cor */
    /* background-color: aquamarine; */
}

ul li:nth-child(3n + 5) {
    /* começando do 5 elemento eu vou mudar a cor de 3 em 3 */
    /* background-color: rgb(111, 209, 127); */
}

ul li::after {
    /* adicionar algo depois */
    /* content: ' - '; pseudo-elemento que será adicionado */
    /* background-color: aqua;
  color: #fff;
  display: block; */
}

ul li::before {
    /* adicionar algo antes */
    /* content: ' - '; */
    /* pseudo-elemento que será adicionado */
    /* background-color: aqua; */
    /* color: #fff; */
    /* display: block; */
}

p::first-letter {
    /* Seleciona a primeira letra */
    /* font-size: 50px;
    display: block;
    float: left;
    margin: 0 10px 10px 0; */
}

p::first-line {
    /* a primeira linha */
    /* background-color: aqua; */
}

p::selection {
    /* o que for selecionado com o mouse terá essa configuração */
    /* background-color: black; */
    /* color: #fff; */
}

::placeholder {
    /* manipular o placeholder - selecionando so o placeholder ou pegando a classe e selecionando o placeholder daquela classe*/
    /* color: aqua; */
}

.texto {
    /* display: block; */
    /* inline não pega as propriedades do box model - o display block não precisa colocar pq já é padrão do box model */
    /* background-color: aqua; */
    /* width: 200px; */
    /* uidif */
    /* height: 200px; */
    /* raite */
    /* overflow: hidden; para que o conteudo não passe para fora do box */
    /* overflow: scroll;  para criar uma barra de rolagem */
    /* overflow-y: auto; */
    /* a barra de rolagem so vai aparecer se o conteudo ultrapassar o espaço */
    /* margin: 0 auto; */
    /* para centralizar a div ao meio */
    /* box-sizing: border-box; */
    /* soma as larguras na classe - pode ser confuso */
    /* a diferença entre padding e margin - o padding enche o elemento e o backound vai junto com ele e o margin enpurra o elemento para longe de outro elemento */
}

/* DISPLAY E FLOAT */

.grid,
.col {
    /* block = blocos 
       inline = linha
       float = é um elemento ocupa somente o espaço dele  e libera o espaço restante para outros elementos 
    */
    display: grid;
    /* mesclagem da inline com a block */
    width: 300px;
    height: 300px;
    background-color: aqua;
    margin: 20px;
    padding: 15px;
    float: left;

}

/* em - se baseia no elemento pai 
html {
 scroll-behavior = smooth; navega a tela ate o id escolhido
}
*/


/* <!-- POSICIONAMENTO --> */
.pai {}

/*
.filha1 , .filha2, .filha3 {
    width: 300px;
    height: 300px;
    background-color: yellow;
    margin: 10px;
    position: static;  elemento fica estatico
}
 */

.filha3 {}

/*
.filha2 {
    position: absolute;
    background-color: green;
    z-index: 1;  o z-index serve para trabalhar com as camadas dos elementos
} 
*/
.filha1 {
    /* position: relative; com o position relative vc consegue usar as propriedades top/left ... */
    /* position: absolute;  ele ignora qualquer outro elemento, exe: se vc quiser centralizar um elemento, ele vai colocar o elemento no meio mesmo se tiver outro no centro, ele fica 'por cima'.*/
    /* essas 4 configurações para o elemento ficar sempre no meio / a margin -px é a metade dos px, pois ele todo é 300px e sem as margens ele não fica centralizado*/
    /* top: 50%;
    margin-top: -150px;
    left: 50%;
    margin-left: -150px;
    z-index: 2;  */
    /* z-index: -1; o -1 coloca os elementos para tras dos outros elementos - como se fosse um plano de fundo */
    /* ela vai ficar por cima pois é uma camada acima do z-index:1 da filha 1 */
}

/* .filha1,
.filha2,
.filha3 {
    width: 300px;
    height: 300px;
    background-color: yellow;
    margin: 10px;
    position: static;
}

.filha1 {}

.filha2 {
    background-color: aqua;
}

.filha3 {
    background-color: blue;
    position: relative;
    top: 100px;
} */

/* OUTRPO EXE DO POSICIONAMENTO */
/* ul {
    height: 200px;
    overflow-y: scroll;
    background-color: aqua;
} */
/*
ul li.sticky {
    position: sticky;  ele vai manter o elemento da classe fixo ate encontrar outro elemento com a mesma classe 
    background-color: gray;
    top: 0;
}
/*